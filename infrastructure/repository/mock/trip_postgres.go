// Code generated by MockGen. DO NOT EDIT.
// Source: travel-api/infrastructure/repository (interfaces: TripQuerier)
//
// Generated by this command:
//
//	mockgen -destination mock/trip_postgres.go travel-api/infrastructure/repository TripQuerier
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"
	database "travel-api/infrastructure/database"

	pgtype "github.com/jackc/pgx/v5/pgtype"
	gomock "go.uber.org/mock/gomock"
)

// MockTripQuerier is a mock of TripQuerier interface.
type MockTripQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockTripQuerierMockRecorder
	isgomock struct{}
}

// MockTripQuerierMockRecorder is the mock recorder for MockTripQuerier.
type MockTripQuerierMockRecorder struct {
	mock *MockTripQuerier
}

// NewMockTripQuerier creates a new mock instance.
func NewMockTripQuerier(ctrl *gomock.Controller) *MockTripQuerier {
	mock := &MockTripQuerier{ctrl: ctrl}
	mock.recorder = &MockTripQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTripQuerier) EXPECT() *MockTripQuerierMockRecorder {
	return m.recorder
}

// CreateTrip mocks base method.
func (m *MockTripQuerier) CreateTrip(ctx context.Context, arg database.CreateTripParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTrip", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTrip indicates an expected call of CreateTrip.
func (mr *MockTripQuerierMockRecorder) CreateTrip(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTrip", reflect.TypeOf((*MockTripQuerier)(nil).CreateTrip), ctx, arg)
}

// DeleteTrip mocks base method.
func (m *MockTripQuerier) DeleteTrip(ctx context.Context, id pgtype.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTrip", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTrip indicates an expected call of DeleteTrip.
func (mr *MockTripQuerierMockRecorder) DeleteTrip(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTrip", reflect.TypeOf((*MockTripQuerier)(nil).DeleteTrip), ctx, id)
}

// GetTrip mocks base method.
func (m *MockTripQuerier) GetTrip(ctx context.Context, id pgtype.UUID) (database.Trip, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrip", ctx, id)
	ret0, _ := ret[0].(database.Trip)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrip indicates an expected call of GetTrip.
func (mr *MockTripQuerierMockRecorder) GetTrip(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrip", reflect.TypeOf((*MockTripQuerier)(nil).GetTrip), ctx, id)
}

// ListTrips mocks base method.
func (m *MockTripQuerier) ListTrips(ctx context.Context) ([]database.Trip, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTrips", ctx)
	ret0, _ := ret[0].([]database.Trip)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTrips indicates an expected call of ListTrips.
func (mr *MockTripQuerierMockRecorder) ListTrips(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTrips", reflect.TypeOf((*MockTripQuerier)(nil).ListTrips), ctx)
}

// UpdateTrip mocks base method.
func (m *MockTripQuerier) UpdateTrip(ctx context.Context, arg database.UpdateTripParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTrip", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTrip indicates an expected call of UpdateTrip.
func (mr *MockTripQuerierMockRecorder) UpdateTrip(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTrip", reflect.TypeOf((*MockTripQuerier)(nil).UpdateTrip), ctx, arg)
}
