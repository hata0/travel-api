// Code generated by MockGen. DO NOT EDIT.
// Source: travel-api/interface/controller (interfaces: TripService)
//
// Generated by this command:
//
//	mockgen -destination mock/trip.go travel-api/interface/controller TripService
//

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	reflect "reflect"
	domain "travel-api/domain"

	gomock "go.uber.org/mock/gomock"
)

// MockTripService is a mock of TripService interface.
type MockTripService struct {
	ctrl     *gomock.Controller
	recorder *MockTripServiceMockRecorder
	isgomock struct{}
}

// MockTripServiceMockRecorder is the mock recorder for MockTripService.
type MockTripServiceMockRecorder struct {
	mock *MockTripService
}

// NewMockTripService creates a new mock instance.
func NewMockTripService(ctrl *gomock.Controller) *MockTripService {
	mock := &MockTripService{ctrl: ctrl}
	mock.recorder = &MockTripServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTripService) EXPECT() *MockTripServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTripService) Create(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockTripServiceMockRecorder) Create(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTripService)(nil).Create), ctx, name)
}

// Delete mocks base method.
func (m *MockTripService) Delete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTripServiceMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTripService)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockTripService) Get(ctx context.Context, id string) (domain.Trip, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(domain.Trip)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockTripServiceMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTripService)(nil).Get), ctx, id)
}

// List mocks base method.
func (m *MockTripService) List(ctx context.Context) ([]domain.Trip, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]domain.Trip)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockTripServiceMockRecorder) List(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockTripService)(nil).List), ctx)
}

// Update mocks base method.
func (m *MockTripService) Update(ctx context.Context, id, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockTripServiceMockRecorder) Update(ctx, id, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTripService)(nil).Update), ctx, id, name)
}
