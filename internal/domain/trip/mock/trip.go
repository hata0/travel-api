// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hata0/travel-api/internal/domain/trip (interfaces: TripRepository)
//
// Generated by this command:
//
//	mockgen -destination mock/trip.go github.com/hata0/travel-api/internal/domain/trip TripRepository
//

// Package mock_trip is a generated GoMock package.
package mock_trip

import (
	context "context"
	reflect "reflect"

	trip "github.com/hata0/travel-api/internal/domain/trip"
	gomock "go.uber.org/mock/gomock"
)

// MockTripRepository is a mock of TripRepository interface.
type MockTripRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTripRepositoryMockRecorder
	isgomock struct{}
}

// MockTripRepositoryMockRecorder is the mock recorder for MockTripRepository.
type MockTripRepositoryMockRecorder struct {
	mock *MockTripRepository
}

// NewMockTripRepository creates a new mock instance.
func NewMockTripRepository(ctrl *gomock.Controller) *MockTripRepository {
	mock := &MockTripRepository{ctrl: ctrl}
	mock.recorder = &MockTripRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTripRepository) EXPECT() *MockTripRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTripRepository) Create(ctx context.Context, arg1 *trip.Trip) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockTripRepositoryMockRecorder) Create(ctx, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTripRepository)(nil).Create), ctx, arg1)
}

// Delete mocks base method.
func (m *MockTripRepository) Delete(ctx context.Context, id trip.TripID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTripRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTripRepository)(nil).Delete), ctx, id)
}

// FindByID mocks base method.
func (m *MockTripRepository) FindByID(ctx context.Context, id trip.TripID) (*trip.Trip, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, id)
	ret0, _ := ret[0].(*trip.Trip)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockTripRepositoryMockRecorder) FindByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockTripRepository)(nil).FindByID), ctx, id)
}

// FindMany mocks base method.
func (m *MockTripRepository) FindMany(ctx context.Context) ([]*trip.Trip, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMany", ctx)
	ret0, _ := ret[0].([]*trip.Trip)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMany indicates an expected call of FindMany.
func (mr *MockTripRepositoryMockRecorder) FindMany(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMany", reflect.TypeOf((*MockTripRepository)(nil).FindMany), ctx)
}

// Update mocks base method.
func (m *MockTripRepository) Update(ctx context.Context, arg1 *trip.Trip) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockTripRepositoryMockRecorder) Update(ctx, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTripRepository)(nil).Update), ctx, arg1)
}
