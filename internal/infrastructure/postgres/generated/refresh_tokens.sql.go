// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: refresh_tokens.sql

package postgres

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createRefreshToken = `-- name: CreateRefreshToken :exec
INSERT INTO refresh_tokens (id, user_id, token, expires_at, created_at)
VALUES ($1, $2, $3, $4, $5)
`

type CreateRefreshTokenParams struct {
	ID        pgtype.UUID
	UserID    pgtype.UUID
	Token     string
	ExpiresAt pgtype.Timestamptz
	CreatedAt pgtype.Timestamptz
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) error {
	_, err := q.db.Exec(ctx, createRefreshToken,
		arg.ID,
		arg.UserID,
		arg.Token,
		arg.ExpiresAt,
		arg.CreatedAt,
	)
	return err
}

const deleteRefreshToken = `-- name: DeleteRefreshToken :exec
DELETE FROM refresh_tokens
WHERE id = $1
`

func (q *Queries) DeleteRefreshToken(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteRefreshToken, id)
	return err
}

const deleteRefreshTokensByUserID = `-- name: DeleteRefreshTokensByUserID :exec
DELETE FROM refresh_tokens
WHERE user_id = $1
`

func (q *Queries) DeleteRefreshTokensByUserID(ctx context.Context, userID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteRefreshTokensByUserID, userID)
	return err
}

const findRefreshTokenByToken = `-- name: FindRefreshTokenByToken :one
SELECT id, user_id, token, expires_at, created_at FROM refresh_tokens
WHERE token = $1 LIMIT 1
`

func (q *Queries) FindRefreshTokenByToken(ctx context.Context, token string) (RefreshToken, error) {
	row := q.db.QueryRow(ctx, findRefreshTokenByToken, token)
	var i RefreshToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}
