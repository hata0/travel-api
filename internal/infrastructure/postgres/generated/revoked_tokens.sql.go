// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: revoked_tokens.sql

package postgres

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createRevokedToken = `-- name: CreateRevokedToken :exec
INSERT INTO revoked_tokens (id, user_id, token_jti, expires_at, revoked_at)
VALUES ($1, $2, $3, $4, $5)
`

type CreateRevokedTokenParams struct {
	ID        pgtype.UUID
	UserID    pgtype.UUID
	TokenJti  string
	ExpiresAt pgtype.Timestamptz
	RevokedAt pgtype.Timestamptz
}

func (q *Queries) CreateRevokedToken(ctx context.Context, arg CreateRevokedTokenParams) error {
	_, err := q.db.Exec(ctx, createRevokedToken,
		arg.ID,
		arg.UserID,
		arg.TokenJti,
		arg.ExpiresAt,
		arg.RevokedAt,
	)
	return err
}

const findRevokedTokenByJTI = `-- name: FindRevokedTokenByJTI :one
SELECT id, user_id, token_jti, expires_at, revoked_at FROM revoked_tokens
WHERE token_jti = $1
`

func (q *Queries) FindRevokedTokenByJTI(ctx context.Context, tokenJti string) (RevokedToken, error) {
	row := q.db.QueryRow(ctx, findRevokedTokenByJTI, tokenJti)
	var i RevokedToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TokenJti,
		&i.ExpiresAt,
		&i.RevokedAt,
	)
	return i, err
}
