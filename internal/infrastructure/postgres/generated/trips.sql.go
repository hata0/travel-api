// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: trips.sql

package postgres

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTrip = `-- name: CreateTrip :exec
INSERT INTO trips (id, name, created_at, updated_at)
VALUES ($1, $2, $3, $4)
`

type CreateTripParams struct {
	ID        pgtype.UUID
	Name      string
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
}

func (q *Queries) CreateTrip(ctx context.Context, arg CreateTripParams) error {
	_, err := q.db.Exec(ctx, createTrip,
		arg.ID,
		arg.Name,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const deleteTrip = `-- name: DeleteTrip :execrows
DELETE FROM trips
WHERE id = $1
`

func (q *Queries) DeleteTrip(ctx context.Context, id pgtype.UUID) (int64, error) {
	result, err := q.db.Exec(ctx, deleteTrip, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const findTrip = `-- name: FindTrip :one
SELECT id, name, created_at, updated_at FROM trips
WHERE id = $1
`

func (q *Queries) FindTrip(ctx context.Context, id pgtype.UUID) (Trip, error) {
	row := q.db.QueryRow(ctx, findTrip, id)
	var i Trip
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listTrips = `-- name: ListTrips :many
SELECT id, name, created_at, updated_at FROM trips
`

func (q *Queries) ListTrips(ctx context.Context) ([]Trip, error) {
	rows, err := q.db.Query(ctx, listTrips)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Trip
	for rows.Next() {
		var i Trip
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTrip = `-- name: UpdateTrip :exec
UPDATE trips
SET
  name = $2,
  updated_at = $3
WHERE id = $1
`

type UpdateTripParams struct {
	ID        pgtype.UUID
	Name      string
	UpdatedAt pgtype.Timestamptz
}

func (q *Queries) UpdateTrip(ctx context.Context, arg UpdateTripParams) error {
	_, err := q.db.Exec(ctx, updateTrip, arg.ID, arg.Name, arg.UpdatedAt)
	return err
}
